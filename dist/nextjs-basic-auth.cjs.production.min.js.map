{"version":3,"file":"nextjs-basic-auth.cjs.production.min.js","sources":["../src/utils/authHeaderToBase64.ts","../src/utils/findAndCheckUser.ts","../src/checkBasicAuth.ts","../src/index.ts"],"sourcesContent":["const headerToBase64 = (header: string) => {\r\n  const b64auth = header.split(\" \")[1]\r\n  const [user, password] = Buffer.from(b64auth, \"base64\")\r\n    .toString()\r\n    .split(\":\")\r\n\r\n  return [user, password]\r\n}\r\n\r\nexport default headerToBase64\r\n","import { User } from \"../types\"\r\n\r\ntype findAndCheckUserReturn = User | false\r\n\r\nconst findAndCheckUser = (\r\n  user: string,\r\n  password: string,\r\n  users: User[]\r\n): findAndCheckUserReturn => {\r\n  const foundUser = users.find(\r\n    acct => acct.user === user && acct.password === password\r\n  )\r\n  if (!foundUser) return false\r\n  return foundUser\r\n}\r\n\r\nexport default findAndCheckUser\r\n","import { IncomingMessage, ServerResponse } from \"http\"\r\nimport { User } from \"./types\"\r\nimport authHeaderToBase64 from \"./utils/authHeaderToBase64\"\r\nimport findAndCheckUser from \"./utils/findAndCheckUser\"\r\n\r\nasync function checkBasicAuth(\r\n  req: IncomingMessage,\r\n  res: ServerResponse,\r\n  users: User[]\r\n) {\r\n  if (!req.headers.authorization) {\r\n    res.setHeader(\"WWW-Authenticate\", 'Basic realm=\"Protected\"')\r\n    res.statusCode = 401\r\n    res.end(\"<html>Unauthorized</html>\")\r\n  } else {\r\n    const [user, password] = authHeaderToBase64(req.headers.authorization)\r\n\r\n    if (!findAndCheckUser(user, password, users)) {\r\n      res.setHeader(\"WWW-Authenticate\", 'Basic realm=\"Protected\"')\r\n      res.statusCode = 401\r\n    }\r\n  }\r\n}\r\n\r\nexport default checkBasicAuth\r\n","import { IncomingMessage, ServerResponse } from \"http\"\r\nimport { User } from \"./types\"\r\nimport checkBasicAuth from \"./checkBasicAuth\"\r\n\r\ninterface Options {\r\n  users?: User[]\r\n}\r\n\r\nfunction init(options: Options = {}) {\r\n  const { users } = options\r\n  if (!users) {\r\n    throw new Error(\r\n      \"You must supply an array of user/password combinations in the config.\"\r\n    )\r\n  }\r\n\r\n  return (req: IncomingMessage, res: ServerResponse) => {\r\n    checkBasicAuth(req, res, users)\r\n  }\r\n}\r\n\r\nexport default init\r\n"],"names":["headerToBase64","header","b64auth","split","Buffer","from","toString","findAndCheckUser","user","password","users","find","acct","req","res","headers","authorization","authHeaderToBase64","setHeader","statusCode","end","options","Error","checkBasicAuth"],"mappings":"0dAAA,IAAMA,EAAiB,SAACC,OAChBC,EAAUD,EAAOE,MAAM,KAAK,KACTC,OAAOC,KAAKH,EAAS,UAC3CI,WACAH,MAAM,WAEF,aCFHI,EAAmB,SACvBC,EACAC,EACAC,UAEkBA,EAAMC,MACtB,SAAAC,UAAQA,EAAKJ,OAASA,GAAQI,EAAKH,WAAaA,OAE3B,mCCPzB,WACEI,EACAC,EACAJ,wEAEKG,EAAIE,QAAQC,iBAKUC,EAAmBJ,EAAIE,QAAQC,eAEnDT,YAAiCG,KACpCI,EAAII,UAAU,mBAAoB,2BAClCJ,EAAIK,WAAa,OARnBL,EAAII,UAAU,mBAAoB,2BAClCJ,EAAIK,WAAa,IACjBL,EAAIM,IAAI,gHCLZ,SAAcC,YAAAA,IAAAA,EAAmB,QACvBX,EAAUW,EAAVX,UACHA,QACG,IAAIY,MACR,gFAIG,SAACT,EAAsBC,4CAC5BS,CAAeV,EAAKC,EAAKJ"}