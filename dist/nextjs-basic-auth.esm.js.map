{"version":3,"file":"nextjs-basic-auth.esm.js","sources":["../src/utils/authHeaderToBase64.ts","../src/utils/findAndCheckUser.ts","../src/checkBasicAuth.ts","../src/index.ts"],"sourcesContent":["const headerToBase64 = (header: string) => {\r\n  const b64auth = header.split(\" \")[1]\r\n  const [user, password] = Buffer.from(b64auth, \"base64\")\r\n    .toString()\r\n    .split(\":\")\r\n\r\n  return [user, password]\r\n}\r\n\r\nexport default headerToBase64\r\n","import { User } from \"../types\"\r\n\r\ntype findAndCheckUserReturn = User | false\r\n\r\nconst findAndCheckUser = (\r\n  user: string,\r\n  password: string,\r\n  users: User[]\r\n): findAndCheckUserReturn => {\r\n  const foundUser = users.find(\r\n    acct => acct.user === user && acct.password === password\r\n  )\r\n  if (!foundUser) return false\r\n  return foundUser\r\n}\r\n\r\nexport default findAndCheckUser\r\n","import { IncomingMessage, ServerResponse } from \"http\"\r\nimport { User } from \"./types\"\r\nimport authHeaderToBase64 from \"./utils/authHeaderToBase64\"\r\nimport findAndCheckUser from \"./utils/findAndCheckUser\"\r\n\r\nasync function checkBasicAuth(\r\n  req: IncomingMessage,\r\n  res: ServerResponse,\r\n  users: User[]\r\n) {\r\n  if (!req.headers.authorization) {\r\n    res.setHeader(\"WWW-Authenticate\", 'Basic realm=\"Protected\"')\r\n    res.statusCode = 401\r\n    res.end(\"<html>Unauthorized</html>\")\r\n  } else {\r\n    const [user, password] = authHeaderToBase64(req.headers.authorization)\r\n\r\n    if (!findAndCheckUser(user, password, users)) {\r\n      res.setHeader(\"WWW-Authenticate\", 'Basic realm=\"Protected\"')\r\n      res.statusCode = 401\r\n    }\r\n  }\r\n}\r\n\r\nexport default checkBasicAuth\r\n","import { IncomingMessage, ServerResponse } from \"http\"\r\nimport { User } from \"./types\"\r\nimport checkBasicAuth from \"./checkBasicAuth\"\r\n\r\ninterface Options {\r\n  users?: User[]\r\n}\r\n\r\nfunction init(options: Options = {}) {\r\n  const { users } = options\r\n  if (!users) {\r\n    throw new Error(\r\n      \"You must supply an array of user/password combinations in the config.\"\r\n    )\r\n  }\r\n\r\n  return (req: IncomingMessage, res: ServerResponse) => {\r\n    checkBasicAuth(req, res, users)\r\n  }\r\n}\r\n\r\nexport default init\r\n"],"names":["headerToBase64","header","b64auth","split","Buffer","from","toString","user","password","findAndCheckUser","users","foundUser","find","acct","checkBasicAuth","req","res","headers","authorization","setHeader","statusCode","end","authHeaderToBase64","init","options","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD;AACrB,MAAMC,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAhB;;AACA,8BAAyBC,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqB,QAArB,EACtBI,QADsB,GAEtBH,KAFsB,CAEhB,GAFgB,CAAzB;AAAA,MAAOI,IAAP;AAAA,MAAaC,QAAb;;AAIA,SAAO,CAACD,IAAD,EAAOC,QAAP,CAAP;AACD,CAPD;;ACIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBF,IADuB,EAEvBC,QAFuB,EAGvBE,KAHuB;AAKvB,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAN,CAChB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACN,IAAL,KAAcA,IAAd,IAAsBM,IAAI,CAACL,QAAL,KAAkBA,QAA5C;AAAA,GADY,CAAlB;AAGA,MAAI,CAACG,SAAL,EAAgB,OAAO,KAAP;AAChB,SAAOA,SAAP;AACD,CAVD;;SCCeG;;;;;6EAAf,iBACEC,GADF,EAEEC,GAFF,EAGEN,KAHF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKE,gBAAI,CAACK,GAAG,CAACE,OAAJ,CAAYC,aAAjB,EAAgC;AAC9BF,cAAAA,GAAG,CAACG,SAAJ,CAAc,kBAAd,EAAkC,yBAAlC;AACAH,cAAAA,GAAG,CAACI,UAAJ,GAAiB,GAAjB;AACAJ,cAAAA,GAAG,CAACK,GAAJ,CAAQ,2BAAR;AACD,aAJD,MAIO;AAAA,kCACoBC,cAAkB,CAACP,GAAG,CAACE,OAAJ,CAAYC,aAAb,CADtC,EACEX,IADF,yBACQC,QADR;;AAGL,kBAAI,CAACC,gBAAgB,CAACF,IAAD,EAAOC,QAAP,EAAiBE,KAAjB,CAArB,EAA8C;AAC5CM,gBAAAA,GAAG,CAACG,SAAJ,CAAc,kBAAd,EAAkC,yBAAlC;AACAH,gBAAAA,GAAG,CAACI,UAAJ,GAAiB,GAAjB;AACD;AACF;;AAhBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;ACGA,SAASG,IAAT,CAAcC,OAAd;MAAcA;AAAAA,IAAAA,UAAmB;;;AAC/B,iBAAkBA,OAAlB;AAAA,MAAQd,KAAR,YAAQA,KAAR;;AACA,MAAI,CAACA,KAAL,EAAY;AACV,UAAM,IAAIe,KAAJ,CACJ,uEADI,CAAN;AAGD;;AAED,SAAO,UAACV,GAAD,EAAuBC,GAAvB;AACLF,IAAAA,cAAc,CAACC,GAAD,EAAMC,GAAN,EAAWN,KAAX,CAAd;AACD,GAFD;AAGD;;;;"}